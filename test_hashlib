#!/usr/bin/as3shebang -- 

import shell.*;

var hashlib:* = Domain.currentDomain.load( "hashlib.abc" );
trace( hashlib + " loaded" );

import flash.utils.ByteArray;
import hash.*;

function uintToHex( n:uint ):String
{
    var hex:String = n.toString( 16 );
    if( hex.length%2 != 0 ) { hex = "0" + hex; }
    return hex;
}


trace( "different hash of \"hello world\"" );

var str:String = "hello world";
var bytes = new ByteArray();
    bytes.writeUTFBytes( str );

// Non-cryptographic hash functions
trace( "                ap = " + uintToHex(   ap( bytes ) ) );
trace( "              bkdr = " + uintToHex( bkdr( bytes ) ) );
trace( "               brp = " + uintToHex(  brp( bytes ) ) );
trace( "               dek = " + uintToHex(  dek( bytes ) ) );
trace( "               djb = " + uintToHex(  djb( bytes ) ) );
trace( "               elf = " + uintToHex(  elf( bytes ) ) );
trace( "               fnv = " + uintToHex(  fnv( bytes ) ) );
trace( "                js = " + uintToHex(   js( bytes ) ) );
trace( "               pjw = " + uintToHex(  pjw( bytes ) ) );
trace( "                rs = " + uintToHex(   rs( bytes ) ) );


// Cyclic redundancy checks
// 8bits
var crc_8;
crc_8 = new crc8();
crc_8.update( bytes );
trace( "              crc8 = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_atm();
crc_8.update( bytes );
trace( "          crc8_atm = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_ccitt();
crc_8.update( bytes );
trace( "        crc8_ccitt = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_darc();
crc_8.update( bytes );
trace( "         crc8_darc = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_icode();
crc_8.update( bytes );
trace( "        crc8_icode = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_itu();
crc_8.update( bytes );
trace( "          crc8_itu = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_j1850();
crc_8.update( bytes );
trace( "        crc8_j1850 = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_maxim();
crc_8.update( bytes );
trace( "        crc8_maxim = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_rohc();
crc_8.update( bytes );
trace( "         crc8_rohc = " + uintToHex( crc_8.valueOf() ) );
crc_8 = new crc8_wcdma();
crc_8.update( bytes );
trace( "        crc8_wcdma = " + uintToHex( crc_8.valueOf() ) );


// 16bits
var crc_16;
crc_16 = new crc16();
crc_16.update( bytes );
trace( "             crc16 = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_aug_ccitt();
crc_16.update( bytes );
trace( "   crc16_aug_ccitt = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_buypass();
crc_16.update( bytes );
trace( "     crc16_buypass = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_ccitt_false();
crc_16.update( bytes );
trace( " crc16_ccitt_false = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_dds10();
crc_16.update( bytes );
trace( "       crc16_dds10 = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_dect_r();
crc_16.update( bytes );
trace( "      crc16_dect_r = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_dect_x();
crc_16.update( bytes );
trace( "      crc16_dect_x = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_dnp();
crc_16.update( bytes );
trace( "         crc16_dnp = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_en13757();
crc_16.update( bytes );
trace( "     crc16_en13757 = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_genibus();
crc_16.update( bytes );
trace( "     crc16_genibus = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_maxim();
crc_16.update( bytes );
trace( "       crc16_maxim = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_mcrf4xx();
crc_16.update( bytes );
trace( "     crc16_mcrf4xx = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_riello();
crc_16.update( bytes );
trace( "      crc16_riello = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_t10dif();
crc_16.update( bytes );
trace( "      crc16_t10dif = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_teledisk();
crc_16.update( bytes );
trace( "    crc16_teledisk = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new crc16_usb();
crc_16.update( bytes );
trace( "         crc16_usb = " + uintToHex( crc_16.valueOf() ) );

crc_16 = new kermit();
crc_16.update( bytes );
trace( "            kermit = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new modbus();
crc_16.update( bytes );
trace( "            modbus = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new x25();
crc_16.update( bytes );
trace( "               x25 = " + uintToHex( crc_16.valueOf() ) );
crc_16 = new xmodem();
crc_16.update( bytes );
trace( "            xmodem = " + uintToHex( crc_16.valueOf() ) );


// 32bits
// TODO